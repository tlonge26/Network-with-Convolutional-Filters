import matplotlib.pyplot as plt
from skimage import data
from skimage.color import rgb2gray
from skimage.transform import resize
import numpy as np

# Load and preprocess the image
im = rgb2gray(data.coffee())
im = resize(im, (64, 64))

# Apply filters without stride
filter1 = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])
filter2 = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]])

new_image1 = np.zeros(im.shape)
new_image2 = np.zeros(im.shape)

im_pad = np.pad(im, 1, "constant")

for i in range(im.shape[0]):
    for j in range(im.shape[1]):
        new_image1[i, j] = (
            im_pad[i - 1, j - 1] * filter1[0, 0]
            + im_pad[i - 1, j] * filter1[0, 1]
            + im_pad[i - 1, j + 1] * filter1[0, 2]
            + im_pad[i, j - 1] * filter1[1, 0]
            + im_pad[i, j] * filter1[1, 1]
            + im_pad[i, j + 1] * filter1[1, 2]
            + im_pad[i + 1, j - 1] * filter1[2, 0]
            + im_pad[i + 1, j] * filter1[2, 1]
            + im_pad[i + 1, j + 1] * filter1[2, 2]
        )

        new_image2[i, j] = (
            im_pad[i - 1, j - 1] * filter2[0, 0]
            + im_pad[i - 1, j] * filter2[0, 1]
            + im_pad[i - 1, j + 1] * filter2[0, 2]
            + im_pad[i, j - 1] * filter2[1, 0]
            + im_pad[i, j] * filter2[1, 1]
            + im_pad[i, j + 1] * filter2[1, 2]
            + im_pad[i + 1, j - 1] * filter2[2, 0]
            + im_pad[i + 1, j] * filter2[2, 1]
            + im_pad[i + 1, j + 1] * filter2[2, 2]
        )

# Visualization
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.imshow(im, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(new_image1, cmap='gray')
plt.title('Filter 1 (Edge Detection)')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(new_image2, cmap='gray')
plt.title('Filter 2 (Vertical Edge Detection)')
plt.axis('off')

plt.show()


custom_stride = 3
new_image1 = np.zeros((int(im.shape[0] / custom_stride), int(im.shape[1] / custom_stride)))
new_image2 = np.zeros((int(im.shape[0] / custom_stride), int(im.shape[1] / custom_stride)))

# Convolution with custom stride
# ... (code omitted for brevity) ...

# Visualize the results
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.imshow(im, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(new_image1, cmap='gray')
plt.title(f'Filter 1 (stride={custom_stride})')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(new_image2, cmap='gray')
plt.title(f'Filter 2 (stride={custom_stride})')
plt.axis('off')

plt.show()
